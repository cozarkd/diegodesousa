---
import SunIcon from './icons/Sun.astro'
import MoonIcon from './icons/Moon.astro'
import SystemIcon from './icons/System.astro'

import { getI18N } from '@/i18n'
const { currentLocale } = Astro
const i18n = getI18N({ currentLocale })

const THEMES: { [key: string]: string } = {
  light: i18n.HEADER.MISCCARD.NAV.THEME.LIGHT,
  dark: i18n.HEADER.MISCCARD.NAV.THEME.DARK,
  system: i18n.HEADER.MISCCARD.NAV.THEME.SYSTEM
}
const THEMES_EN: Array<keyof typeof THEMES> = ['light', 'dark', 'system']
---

<div class='relative inline-block text-left'>
  <div class='group text-xs font-semibold transition-all'>
    <button
      type='button'
      id='theme-toggle-btn'
      class='inline-flex w-full items-center justify-start gap-x-2 px-3 py-2 transition hover:scale-125 hover:text-accent'
      aria-expanded='true'
      aria-haspopup='true'
    >
      <span class='sr-only'>{i18n.HEADER.MISCCARD.NAV.THEME.SWITCH}</span>
      <SunIcon id='light' class='theme-toggle-icon size-5 transition-all' />
      <MoonIcon
        id='dark'
        class='theme-toggle-icon absolute size-5 transition-all'
      />
      <SystemIcon
        id='system'
        class='theme-toggle-icon absolute size-5 transition-all'
      />
    </button>
    <ul
      id='themes-menu'
      class='group-hover:animate-fade-down group-hover:animate-duration-200 absolute left-0 right-auto top-8 hidden min-w-[10rem] bg-background pt-0.5 shadow-lg group-hover:block dark:bg-gray-800 md:left-auto md:right-0'
    >
      {
        THEMES_EN.map((theme) => (
          <li
            class='themes-menu-option cursor-pointer rounded-sm px-2 py-1.5 text-base hover:bg-white/50 hover:text-accent dark:hover:bg-white/5'
            data-theme={theme}
          >
            {THEMES[theme]}
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  @keyframes fade-down {
    from {
      transform: translateY(-10px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }
  .group-hover\\:animate-fade-down {
    animation: fade-down 0.2s ease-out forwards;
  }
</style>

<script is:inline>
  document.addEventListener('astro:page-load', () => {
    let remove = null
    const matchMedia = window.matchMedia('(prefers-color-scheme: dark)')
    const themesMenu = document.getElementById('themes-menu')

    const getThemePreference = () => {
      if (typeof localStorage !== 'undefined') {
        return localStorage.getItem('theme') ?? 'system'
      }
      return window.matchMedia('(prefers-color-scheme: dark)').matches
        ? 'dark'
        : 'light'
    }

    const updateIcon = (themePreference) => {
      document.querySelectorAll('.theme-toggle-icon').forEach((element) => {
        element.style.scale = element.id === themePreference ? '1' : '0'
      })
    }

    const updateTheme = () => {
      if (remove != null) {
        remove()
      }
      matchMedia.addEventListener('change', updateTheme)
      remove = () => {
        matchMedia.removeEventListener('change', updateTheme)
      }

      const themePreference = getThemePreference()
      const isDark =
        themePreference === 'dark' ||
        (themePreference === 'system' && matchMedia.matches)

      updateIcon(themePreference)
      document.documentElement.classList[isDark ? 'add' : 'remove']('dark')
    }

    updateTheme()

    document.addEventListener('click', () =>
      themesMenu.classList.remove('open')
    )

    document
      .getElementById('theme-toggle-btn')
      .addEventListener('click', (e) => {
        e.stopPropagation()
        const isClosed = !themesMenu.classList.contains('open')
        themesMenu.classList[isClosed ? 'add' : 'remove']('open')
      })

    document.querySelectorAll('.themes-menu-option').forEach((element) => {
      element.addEventListener('click', (e) => {
        const theme = e.target.getAttribute('data-theme')
        localStorage.setItem('theme', theme)
        updateTheme()
      })
    })
  })
</script>
